<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="script_db_ferreteria" xml:space="preserve">
    <value>CREATE DATABASE sys_ferreteria
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

-- Crear la tabla cliente
CREATE TABLE cliente (
    cli_id SERIAL PRIMARY KEY,
    cli_nombre VARCHAR(50) NOT NULL,
	cli_cedula VARCHAR(20) UNIQUE NOT NULL,
    cli_direccion VARCHAR(100) NULL,
	cli_telefono VARCHAR(25) NULL,
	cli_correo VARCHAR(25) NULL,
	cli_estado SMALLINT NOT NULL DEFAULT 1
);
	
-- Crear la tabla usuario
CREATE TABLE usuario (
    usu_id SERIAL PRIMARY KEY,
	usu_cliente_id INT REFERENCES cliente(cli_id) NULL,
    usu_nombre VARCHAR(25) UNIQUE NOT NULL,
	usu_correo VARCHAR(100) UNIQUE NOT NULL,
	usu_clave VARCHAR(150) NOT NULL,
	usu_rol VARCHAR(10) NOT NULL
);

-- Crear la tabla articulo
CREATE TABLE articulo (
    art_id SERIAL PRIMARY KEY,
	art_codigo INT NOT NULL,
	art_nombre VARCHAR(50) NOT NULL,
	art_material INT NULL,
	art_durabilidad VARCHAR(5) NULL,
	art_peso NUMERIC NULL,
	art_tamanio VARCHAR(50) NULL,
	art_precio NUMERIC NOT NULL,
	art_stock INT NOT NULL DEFAULT 0,
	art_estado SMALLINT NOT NULL DEFAULT 1
);

-- Crear la tabla imagenes de articulos
CREATE TABLE articulo_imagen (
    aim_id SERIAL PRIMARY KEY,
	aim_articulo_id INT REFERENCES articulo(art_id),
	aim_img BYTEA
);

-- Crear la tabla trazabilidad articulo
CREATE TABLE articulo_trace (
	atr_id SERIAL PRIMARY KEY,
	atr_articulo_id INT REFERENCES articulo(art_id),
	atr_descripcion VARCHAR(100) NOT NULL,
	art_fecha TIMESTAMP NOT NULL,
	art_usuario_id INT REFERENCES usuario(usu_id)
);

-- Crear la tabla cuenta
CREATE TABLE cuenta (
	cue_id SERIAL PRIMARY KEY,
	cue_cliente_id INT REFERENCES cliente(cli_id),
	cue_fecha_emision DATE NOT NULL,
	cue_hora_emision TIME NOT NULL,
	cue_subtotal NUMERIC NOT NULL,
	cue_impuestos NUMERIC NOT NULL,
	cue_total NUMERIC NOT NULL
);

-- Crear la tabla detalle de la cuenta
CREATE TABLE detalle_cuenta (
	dcu_id SERIAL PRIMARY KEY,
	dcu_cuenta_id INT REFERENCES cuenta(cue_id),
	dcu_tipo SMALLINT NOT NULL,
	dcu_articulo_id INT NULL REFERENCES articulo(art_id),
	dcu_cantidad SMALLINT NOT NULL,
	dcu_total NUMERIC NOT NULL
);</value>
  </data>
</root>